////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step = 1, rangeArray = []) {

  //base case
  
  if (step < 0 && start < end) return rangeArray

  if (start === end)  {
    if (rangeArray.length === 0) return rangeArray
    rangeArray.push(end)
    return rangeArray
    
  }


  if (start < end) {
    rangeArray.push(start)
    return range(start + step, end, step, rangeArray)
  }

  //recursion
  if (start > end) {
    rangeArray.push(start )
    return range(start - step, end, step, rangeArray)
  }
  
}




////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  var sumOfArray = 0
if (array === []) return 0
for (var i = 0; i < array.length; i++){
  sumOfArray += array[i]
} return sumOfArray
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array, newArray = []) {
  if (array.length === 0) return newArray
  for (var i = array.length - 1; i >= 0; i--){
    newArray.push(array[i])
  }
return newArray
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array, n = array.length) {
if (n === 0) return array

array.unshift(array.pop())
return reverseArrayInPlace(array, n - 1)

}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
 let rest = null;

 for (let i = array.length - 1; i >= 0; i--){
  rest = {value: array[i], rest: rest};
 }
 return rest 



}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, array = []) {
if (list.rest === null){
  array.push(list.value)
  return array;
}
array.push(list.value);
return listToArray(list.rest, array)
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x , y) {
  if (typeof x !== 'object' && typeof y !== 'object'){
    return x === y;
  }
  if (typeof x !== 'object' || typeof y !== 'object'){
    return false;
  }
  let xKeys = Object.keys(x);
  let yKeys = Object.keys(y);
  if (xKeys.length !== yKeys.length){
    return false;
  }
  for (let i = 0; i < xKeys.length; i++){
    if (!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])){
      return false;
    }
  } return true 
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
